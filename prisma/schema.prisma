generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  interviews    Interview[] @relation("UserInterviews")
  feedbacks     Feedback[]  @relation("UserFeedbacks")
}

model Interview {
  id         String   @id @default(uuid())
  role       String
  type       String
  level      String
  techstack  Json
  questions  Json
  userId     String
  finalized  Boolean  @default(false)
  coverImage String
  createdAt  DateTime @default(now())

  user      User       @relation("UserInterviews", fields: [userId], references: [id])
  feedbacks Feedback[]
}

model Feedback {
  id                  String   @id @default(cuid())
  interviewId         String
  userId              String
  totalScore          Int
  categoryScores      Json
  strengths           Json // store as string[]
  areasForImprovement Json // store as string[]
  finalAssessment     String
  createdAt           DateTime @default(now())

  interview Interview @relation(fields: [interviewId], references: [id])
  user      User      @relation("UserFeedbacks", fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
